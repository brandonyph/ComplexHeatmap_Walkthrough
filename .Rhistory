for(i in  1:10) mat_with_outliers[i, i] = 1000
robust_dist = function(x, y) {
qx = quantile(x, c(0.1, 0.9))
qy = quantile(y, c(0.1, 0.9))
l = x > qx[1] & x < qx[2] & y > qy[1] & y < qy[2]
x = x[l]
y = y[l]
sqrt(sum((x - y)^2))
}
Heatmap(mat_with_outliers, name = "mat",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
column_title = "dist")
Heatmap(mat_with_outliers, name = "mat",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
clustering_distance_rows = robust_dist,
clustering_distance_columns = robust_dist,
column_title = "robust_dist")
library(dendextend)
row_dend = as.dendrogram(hclust(dist(mat)))
row_dend = color_branches(row_dend, k = 2) # `color_branches()` returns a dendrogram object
Heatmap(mat, name = "mat", cluster_rows = row_dend)
library(dendextend)
row_dend = as.dendrogram(hclust(dist(mat)))
row_dend = color_branches(row_dend, k = 5) # `color_branches()` returns a dendrogram object
Heatmap(mat, name = "mat", cluster_rows = row_dend)
row_dend = dendrapply(row_dend, function(d) {
attr(d, "nodePar") = list(cex = 0.8, pch = sample(20, 1), col = rand_color(1))
return(d)
})
Heatmap(mat, name = "mat", cluster_rows = row_dend, row_dend_width = unit(2, "cm"))
row_dend = dendrapply(row_dend, function(d) {
attr(d, "nodePar") = list(cex = 0.8, pch = sample(20, 1), col = rand_color(2))
return(d)
})
Heatmap(mat, name = "mat", cluster_rows = row_dend, row_dend_width = unit(4, "cm"))
#The pch in R defines the point symbols in the functions plot() and lines().\
#https://r-lang.com/pch-in-r/
# cex: number indicating the amount by which plotting text and symbols should be scaled relative to the default. 1=default, 1.5 is 50% larger, 0.5 is 50% smaller, etc.
#https://www.statmethods.net/advgraphs/parameters.html
m2 = matrix(1:100, nr = 10, byrow = TRUE)
Heatmap(m2, name = "mat", row_dend_reorder = FALSE, column_title = "no reordering")
Heatmap(m2, name = "mat", row_dend_reorder = TRUE, column_title = "apply reordering")
Heatmap(mat, name = "mat", column_title = "default reordering")
library(dendsort)
col_dend = dendsort(hclust(dist(t(mat))))
Heatmap(mat, name = "mat", cluster_columns = col_dend,
column_title = "reorder by dendsort")
Heatmap(mat, name = "mat", row_order = order(as.numeric(gsub("row", "", rownames(mat)))),
column_order = order(as.numeric(gsub("column", "", colnames(mat)))),
column_title = "reorder matrix")
Heatmap(mat, name = "mat", row_order = sort(rownames(mat)),
column_order = sort(colnames(mat)),
column_title = "reorder matrix by row/column names")
Heatmap(mat)
Heatmap(mat, name = "mat", row_names_side = "left", row_dend_side = "right",
column_names_side = "top", column_dend_side = "bottom")
Heatmap(mat, name = "mat", column_names_rot = 0, column_names_side = "top",
column_dend_side = "bottom")
Heatmap(mat, name = "mat", column_names_rot = 45, column_names_side = "top",
column_dend_side = "bottom")
#Split based on densogram
Heatmap(mat, name = "mat")
Heatmap(mat, name = "mat", row_split = 2, column_split = 3)
#SPlit based on Kmeans clustering
Heatmap(mat, name = "mat")
Heatmap(mat, name = "mat", row_km = 5)
Heatmap(mat, name = "mat", column_km = 5)
# Custom split based on external parameters, using a list
rowsplit <- rep(c("A", "B"), 9)
Heatmap(mat, name = "mat",
row_split = rowsplit)
#You can roorder the split by reordering alevel of the factor
View(mat)
# Custom split based on external parameters, split by a data frame
splitdf <- data.frame(rep(c("A", "B"), 9), rep(c("C", "D"), each = 9))
Heatmap(mat, name = "mat",
row_split = splitdf)
Heatmap(mat, name = "mat",
row_split = splitdf,
row_gap = unit(5, "mm"))
View(splitdf)
# Custom split based on external parameters, split by a data frame
splitdf <- data.frame(rep(c("A", "B"), 9), rep(c("C", "D"), each = 9))
Heatmap(mat, name = "mat",
row_split = splitdf)
Heatmap(mat, name = "mat",
row_split = splitdf,
row_gap = unit(5, "mm"))
#More customization of the Tittles
Heatmap(mat, name = "mat",
column_km = 3, column_title_gp = gpar(fill = c("red", "blue", "green"), font = 1:3),
column_names_gp = gpar(col = c("green", "orange", "purple"), fontsize = c(10, 14, 8)))
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
set.seed(123)
mat = matrix(rnorm(100), 10)
rownames(mat) = paste0("R", 1:10)
colnames(mat) = paste0("C", 1:10)
column_ha = HeatmapAnnotation(foo1 = runif(10), bar1 = anno_barplot(runif(10)))
row_ha = rowAnnotation(foo2 = runif(10), bar2 = anno_barplot(runif(10)))
Heatmap(mat, name = "mat", top_annotation = column_ha, right_annotation = row_ha)
Heatmap(mat, name = "mat", bottom_annotation = column_ha, left_annotation = row_ha)
column_ha = HeatmapAnnotation(foo1 = runif(10), bar1 = anno_barplot(runif(10)))
foo1 = runif(10)
bar1 = anno_barplot(runif(10))
column_ha
column_ha = HeatmapAnnotation(foo1 = runif(10), bar1 = anno_barplot(runif(10)))
foo1 = runif(10)
bar1 = anno_barplot(runif(10))
column_ha
ha2 = rowAnnotation( foo = 1:10,
bar = cbind(1:10, 10:1),
pt = anno_points(1:10),
show_legend = c("bar" = FALSE)
)
Heatmap(matrix(rnorm(100), 10), name = "mat", right_annotation = ha2)
Heatmap(matrix(rnorm(100), 10), name = "mat", left_annotation = ha2)
m = matrix(rnorm(50*10), nrow = 50)
ht_list = Heatmap(m, name = "main_matrix")
ha = HeatmapAnnotation(summary = anno_summary(height = unit(3, "cm")))
v = sample(letters[1:2], 50, replace = TRUE)
ht_list = ht_list + Heatmap(v, name = "mat1", top_annotation = ha, width = unit(1, "cm"))
ha = HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2:3),
height = unit(3, "cm")))
v = rnorm(50)
ht_list = ht_list + Heatmap(v, name = "mat2", top_annotation = ha, width = unit(1, "cm"))
split = sample(letters[1:2], 50, replace = TRUE)
lgd_boxplot = Legend(labels = c("group a", "group b"), title = "group",
legend_gp = gpar(fill = c("red", "blue")))
draw(ht_list, row_split = split, ht_gap = unit(5, "mm"),
heatmap_legend_list = list(lgd_boxplot))
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
library(grid)
library(ggplot2)
set.seed(123)
mat = matrix(rnorm(100), 10)
library(circlize)
#Created for individual legend, in complexheatmap, the color follows the heatmap col_fun
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "white", "red"))
lgd = Legend(col_fun = col_fun)
#Draw out individual Heatmap
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
draw(lgd, x = unit(0.9, "npc"), y = unit(0.5, "npc"))
popViewport()
ht1 <- Heatmap(mat)
draw(ht1, heatmap_legend_list = list(lgd))
Heatmap(mat,
heatmap_legend_param = list(
title = "rnorm", at = c(-2, 0, 2),
labels = c("neg_two", "zero", "pos_two")
)
lgd_list <- list(
title = "rnorm",
at = c(-1, 0, 1),
labels = c("neg_two", "zero", "pos_two")
)
Heatmap(mat, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3")
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm")
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm")
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm"),
title_position = "leftcenter-rot"
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm"),
title_position = "topcenter", # some options are not allow horizontal tittle
direction = "horizontal"
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
mat2  <- matrix(rep(month.name[1:6],100),ncol=10,nrow=10)
colors = structure(c("blue", "yellow", "red","black", "grey", "pink"), names= month.name[1:6])
lgd_list <- list(title = "Month",
at = month.name[1:6],
label = month.name[1:6],
legend_height = unit(9, "cm"),
grid_width = unit(2, "cm"),
title_position = "topcenter"
)
Heatmap(mat2,col=colors, heatmap_legend_param = lgd_list)
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm"),
title_position = "topcenter", # some options are not allow horizontal tittle
direction = "horizontal"
)
ht1 <- Heatmap(mat, heatmap_legend_param = lgd_list)
draw(ht1, heatmap_legend_side = "left")
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm"),
title_position = "topcenter", # some options are not allow horizontal tittle
direction = "horizontal"
)
ht1 <- Heatmap(mat, heatmap_legend_param = lgd_list)
draw(ht1, heatmap_legend_side = "top")
#Follow https://stackoverflow.com/questions/52794692/complexheatmap-cannot-create-horizontal-legend
#if you need your discrete legend
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
library(grid)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
library(grid)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
library(grid)
library(ggplot2)
set.seed(123)
mat = matrix(rnorm(100), 10)
library(circlize)
#Created for individual legend, in complexheatmap, the color follows the heatmap col_fun
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "white", "red"))
lgd = Legend(col_fun = col_fun)
#Draw out individual Heatmap
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
draw(lgd, x = unit(0.9, "npc"), y = unit(0.5, "npc"))
popViewport()
ht1 <- Heatmap(mat)
draw(ht1, heatmap_legend_list = list(lgd))
Heatmap(mat,
heatmap_legend_param = list(
title = "rnorm", at = c(-2, 0, 2),
labels = c("neg_two", "zero", "pos_two")
)
lgd_list <- list(
title = "rnorm",
at = c(-1, 0, 1),
labels = c("neg_two", "zero", "pos_two")
)
Heatmap(mat, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3")
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm")
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm")
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm"),
title_position = "leftcenter-rot"
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "yellow", "red"))
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm"),
title_position = "topcenter", # some options are not allow horizontal tittle
direction = "horizontal"
)
Heatmap(mat, col=col_fun, heatmap_legend_param = lgd_list)
mat2  <- matrix(rep(month.name[1:6],100),ncol=10,nrow=10)
colors = structure(c("blue", "yellow", "red","black", "grey", "pink"), names= month.name[1:6])
lgd_list <- list(title = "Month",
at = month.name[1:6],
label = month.name[1:6],
legend_height = unit(9, "cm"),
grid_width = unit(2, "cm"),
title_position = "topcenter"
)
Heatmap(mat2,col=colors, heatmap_legend_param = lgd_list)
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm"),
title_position = "topcenter", # some options are not allow horizontal tittle
direction = "horizontal"
)
ht1 <- Heatmap(mat, heatmap_legend_param = lgd_list)
draw(ht1, heatmap_legend_side = "left")
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm"),
title_position = "topcenter", # some options are not allow horizontal tittle
direction = "horizontal"
)
ht1 <- Heatmap(mat, heatmap_legend_param = lgd_list)
draw(ht1, heatmap_legend_side = "left")
lgd_list <- list(title = "foo",
at = c(0, 0.5, 1),
label = c("Label1","Label2","Label3"),
legend_height = unit(6, "cm"),
grid_width = unit(4, "cm"),
title_position = "topcenter", # some options are not allow horizontal tittle
direction = "horizontal"
)
ht1 <- Heatmap(mat, heatmap_legend_param = lgd_list)
draw(ht1, heatmap_legend_side = "top")
#Follow https://stackoverflow.com/questions/52794692/complexheatmap-cannot-create-horizontal-legend
#if you need your discrete legend
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
library(grid)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
mat = matrix(rnorm(100), 10)
library(circlize)
#Created for individual legend, in complexheatmap, the color follows the heatmap col_fun
col_fun = colorRamp2(c(0, 0.5, 1), c("blue", "white", "red"))
lgd = Legend(col_fun = col_fun)
#Draw out individual Heatmap
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
draw(lgd, x = unit(0.9, "npc"), y = unit(0.5, "npc"))
popViewport()
ht1 <- Heatmap(mat)
draw(ht1, heatmap_legend_list = list(lgd))
ht1 <- Heatmap(mat)
draw(ht1, heatmap_legend_list = list(lgd))
lgd_list <- list(
title = "rnorm",
at = c(-1, 0, 1),
labels = c("neg_two", "zero", "pos_two")
)
Heatmap(mat, heatmap_legend_param = lgd_list)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
library(grid)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
library(grid)
library(ggplot2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
library(grid)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
column_ha = HeatmapAnnotation(foo1 = runif(10), bar1 = anno_barplot(runif(10)))
foo1 = runif(10)
bar1 = anno_barplot(runif(10))
column_ha
View(column_ha)
ha = columnAnnotation(foo = 1:18)
Heatmap(mat) %v% ha
ha = columnAnnotation(foo = 1:10)
Heatmap(mat) %v% ha
library(circlize)
col_fun = colorRamp2(c(0, 5, 10), c("blue", "white", "red"))
ha = rowAnnotation(
foo = 1:10,
bar = sample(letters[1:3], 10, replace = TRUE),
col = list(foo = col_fun,
bar = c("a" = "red", "b" = "green", "c" = "blue")
),
border = TRUE
)
Heatmap(mat) + ha
v = sample(letters[1:2], 50, replace = TRUE)
split = sample(letters[1:2], 50, replace = TRUE)
Heatmap(v)
split = sample(letters[1:2], 50, replace = TRUE)
Heatmap(v)
Heatmap(v, name = "mat", col = c("a" = "red", "b" = "blue"))
Heatmap(v, name = "mat", col = c("a" = "red", "b" = "blue"), top_annotation = ha)
ha = HeatmapAnnotation(summary = anno_summary(height = unit(4, "cm")))
v =     sample(letters[1:2], 50, replace = TRUE)
split = sample(letters[1:2], 50, replace = TRUE)
Heatmap(v)
Heatmap(v, name = "mat", col = c("a" = "red", "b" = "blue"))
Heatmap(v, name = "mat", col = c("a" = "red", "b" = "blue"), top_annotation = ha)
Heatmap(v, name = "mat", col = c("a" = "red", "b" = "blue"), top_annotation = ha, width = unit(2, "cm"), row_split = split)
ha = HeatmapAnnotation(summary = anno_summary(height = unit(4, "cm")))
v =     sample(letters[1:2], 50, replace = TRUE)
split = sample(letters[3:4], 50, replace = TRUE)
Heatmap(v)
Heatmap(v, name = "mat", col = c("a" = "red", "b" = "blue"))
Heatmap(v, name = "mat", col = c("a" = "red", "b" = "blue"), top_annotation = ha)
Heatmap(v, name = "mat", col = c("a" = "red", "b" = "blue"), top_annotation = ha, width = unit(2, "cm"), row_split = split)
ha = HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2:3), height = unit(4, "cm")))
v = rnorm(50)
split = sample(letters[1:2], 50, replace = TRUE)
Heatmap(v, name = "mat")
Heatmap(v, name = "mat",top_annotation = ha)
Heatmap(v, name = "mat",top_annotation = ha, width = unit(2, "cm"))
Heatmap(v, name = "mat",top_annotation = ha, width = unit(2, "cm"), row_split = split)
ha = HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2:3), height = unit(4, "cm")))
v = rnorm(50)
Heatmap(v, name = "mat")
Heatmap(v, name = "mat", bottom_annotation = ha)
Heatmap(v, name = "mat" ,bottom_annotation = ha, width = unit(2, "cm"))
rm(ht_list)
m = matrix(rnorm(50*10), nrow = 50)
ht_list = Heatmap(m, name = "main_matrix")
ha = HeatmapAnnotation(summary = anno_summary(height = unit(3, "cm")))
v = sample(letters[1:2], 50, replace = TRUE)
ht_list = ht_list + Heatmap(v, name = "mat1", top_annotation = ha, width = unit(1, "cm"))
draw(ht_list)
split = sample(letters[1:2], 50, replace = TRUE)
lgd_boxplot = Legend(labels = c("group a", "group b"), title = "group",
legend_gp = gpar(fill = c("red", "blue")))
draw(ht_list,
row_split = split,
ht_gap = unit(10, "mm"),
heatmap_legend_list = list(lgd_boxplot))
ha = HeatmapAnnotation(summary = anno_summary(gp = gpar(fill = 2:3),
height = unit(3, "cm")))
v = rnorm(50)
ht_list = ht_list + Heatmap(v, name = "mat2", top_annotation = ha, width = unit(1, "cm"))
draw(ht_list)
split = sample(letters[1:2], 50, replace = TRUE)
lgd_boxplot = Legend(labels = c("group a", "group b"), title = "group",
legend_gp = gpar(fill = c("red", "blue")))
draw(ht_list,
row_split = split,
ht_gap = unit(10, "mm"),
heatmap_legend_list = list(lgd_boxplot))
ha2 = rowAnnotation( foo = 1:10,
bar = cbind(1:10, 10:1),
pt = anno_points(1:10),
show_legend = c("bar" = FALSE)
)
Heatmap(matrix(rnorm(100), 10), name = "mat", right_annotation = ha2)
Heatmap(matrix(rnorm(100), 10), name = "mat", left_annotation = ha2)
